name: 'Lando Start'
description: 'Spin up oit website'
inputs:
  GH_TOKEN_REPO:
    description: "PAT"
    required: true
  GITHUB_TOKEN:
    description: "Github token"
    required: true
  LANDO_ENV:
    description: ".env variables"
    required: true
  CREATEUSERS:
    description: "Dev users script"
    required: true
  SERVICENOW_KEY:
    description: "Servicenow key"
    required: true
  ENCRYPT_KEY:
    description: "One key to rule them all"
    required: true
  TEAMS_KEY:
    description: "Key to send teams messages"
    required: true
  LIASON:
    description: "Liason Key"
    required: true
  SUBSCRIPTIONS_KEY:
    description: "Subscriptions key"
    required: true
  DATABASE:
    description: "Use specific backup"
    required: false

runs:
  using: "composite"
  steps:
    - name: Custom DATABASE
      run: echo "DATABASE=$( $DATABASE )" >> $GITHUB_ENV
      env:
        database: ${{ inputs.DATABASE }}
      shell: bash

    - name: Set lando version.
      run: echo "LANDO_VERSION=$(cat .github/lando_version.md)" >> $GITHUB_ENV
      shell: bash

    - name: Cache Lando
      id: cache-lando
      uses: actions/cache@v3
      with:
        path: /usr/local/bin/lando
        key: ${{ runner.os }}-${{ env.LANDO_VERSION }}-lando

    - name: Install Lando
      if: steps.cache-lando.outputs.cache-hit != 'true'
      run: |
        sudo curl -fsSL -o /usr/local/bin/lando "https://files.lando.dev/cli/lando-linux-x64-$LANDO_VERSION"
        sudo chmod +x /usr/local/bin/lando
      shell: bash

    - name: "Validate composer.json and composer.lock"
      run: "composer validate --strict"
      shell: bash

    - name: Composer cache directory
      run: echo "COMPOSER_DIR=$(composer config cache-dir)" >> $GITHUB_ENV
      shell: bash

    - name: Cache Composer dependencies
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: "${{ env.COMPOSER_DIR }}"
        key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

    - name: Composer install
      run: |
        composer config -g github-oauth.github.com $gh_token
        composer install --ignore-platform-reqs --prefer-dist -n
      shell: bash
      env:
        gh_token: ${{ inputs.GH_TOKEN_REPO }}

    - name: Last Sunday date
      run: echo "LAST_SUNDAY=$(date -d "last Sunday" +%Y-%m-%d)" >> $GITHUB_ENV
      shell: bash

    - name: Todays date
      run: echo "DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
      shell: bash

    - name: Cache Files
      id: drupal-files-cache
      uses: actions/cache@v3
      with:
        path: |
          docroot/sites/default/files
          files-private
        key: ${{ runner.os }}-${{ env.LAST_SUNDAY }}-files

    - name: Daily db cache
      id: drupal-db-cache
      uses: actions/cache@v3
      with:
        path: backups
        key: ${{ runner.os }}-${{ env.DATE }}-db

    - name: Spin up site
      run: |
        composer config -g github-oauth.github.com $gh_token
        #composer install --ignore-platform-reqs -n
        echo "$lando_env" > .env
        echo "GITHUB_TOKEN=$GITHUB_ACTOR:$GITHUB_TOKEN" >> .env
        vendor/bin/blt oit:landosetup $gh_token
        ls docroot/sites/default/settings/
        mkdir .keys
        echo "$test_users" > .keys/createTestUsers.sh
        echo "$encrypt_key" > .keys/encrypt.key
        echo "$servicenow" > .keys/oit.servicenow.key
        echo "$teams_key" > .keys/dingo_teams.key
        echo "$liason" > .keys/oit.liaison.key
        echo "$subscripiton" > .keys/oit.subscriptions.key
        cp blt/local-behat.yml tests/behat/local.yml
      shell: bash
      env:
        gh_token: ${{ inputs.GH_TOKEN_REPO }}
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        lando_env: ${{ inputs.LANDO_ENV }}
        test_users: ${{ inputs.CREATEUSERS }}
        servicenow: ${{ inputs.SERVICENOW_KEY }}
        encrypt_key: ${{ inputs.ENCRYPT_KEY }}
        teams_key: ${{ inputs.TEAMS_KEY }}
        liason: ${{ inputs.LIASON }}
        subscripiton: ${{ inputs.SUBSCRIPTIONS_KEY }}

    - name: Custom Database
      if: "${{ env.DATABASE != '' }}"
      run: |
        rm backups/site.sql.gz
        wget -O backups/site.sql.gz '$DATABASE'
        lando db-import backups/site.sql.gz
        lando drush sql-sanitize --sanitize-password -y
        chmod u+x .keys/createTestUsers.sh
        lando ssh -c /app/.keys/createTestUsers.sh
        lando drush en oit_dev
        lando drush en dblog devel devel_kint_extras
      shell: bash

